// из app.component все перенесли в home-page-component
import { Component, OnInit } from '@angular/core';
import { UsersService } from '../users.service';

@Component({
  selector: 'app-home-page',
  templateUrl: './home-page.component.html',
  styleUrls: ['./home-page.component.scss']
})
export class HomePageComponent implements OnInit {

   users = [];
  
 // создаем переменную searchStr, по умолчанию она будет являться пустой строкой
 // если мы пользуемся two way binding, т.е. ngModel, то нам также нужно зарегистрировать определенный модуль, чтобы он поддерживал работу данного функционала
 // переходим в app.module и в массиве imports добавляем FormsModule, кот. импортируется из библиотеки '@angular/forms'
   searchStr = '';

 // Подключение сервисов в компоненты - UsersService нужно подключить в компоненте (2 шаг создание сервиса)
 // обращаемся к конструктору, создаем приватную переменную UsersService, которая будет являться типом UsersService
  
 // мы инжектим некоторые сервисы в наш копонент с помощью данной конструкции
 // после этого он у нас доступен и мы можем обращаться к его различным полям
 constructor(private usersService: UsersService) {}  
 
 // обращаемся к переменной this, в ней хранится теперь сервис UsersService и мы обращаемся к его полю users
 // мы заносим в переменную users значение массива, который у нас лежит в сервисе user.service.ts

 // в Angular есть специальные callback (функция обраатного вы́зова), которые отвечают за жизненный цикл компонента
 // принято различные присвоения данных делать в данном компоненте
 // constructor при этом остается для инжекта Inject (вводить)
 
 ngOnInit() {
   // this.users = this.UsersService.users

  // обращаемся в сервису, к его методу getUsers

  // если мы не подписываемся на стрим (а как раз-таки http-объект возвращает нам RXjs stream), то он не будет делать запрос, т.е. мы обязательно должны пописаться на данный запрос, чтобы он выполнился
  // мы уже работаем со стримом, это обычный стрим библиотеки RXjs. Он возвращается у нас в результате работы данного метода this.usersService.getUsers(), поэтому мы можем подписаться на данный стрим с помощью функции subscribe.
  // сюда мы будем принимать некоторый массив users
  // теперь нужно обработать ответ сервера в users.service.ts

  // у нас есть приватный массив users и все, что мы сделаем в данном методе, мы должны переопределить данный пустой массив, для того, чтобы мы вывели его в цикле   
    this.usersService.getUsers().subscribe(users=> {
      // this.users переопределим на тех юзеров, которые приходят нам в методе subscribe
     this.users = users
    }); 
 }

}
