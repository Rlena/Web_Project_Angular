// создадим директиву, кот. будет изменять состояние карточки и как-то ее выделять
// этот файл будет создавать директиву, кот. можем использовать в проекте
// создание директивы начинается с создания класса в typeScript и экспортировать его наружу
// после чего нужно указать angular, что данный класс является директивой, поэтому ставить спец. декоратор @Directive
// и мы его иипортируем из библиотеки angular/core
import { Directive, HostBinding, HostListener } from '@angular/core'

// в качестве параметра декоратору мы передаем объект, и здесь обязательное поле - selector
// т.к. директивы обычно вешаются как атрибуты, то здесь как css-селектор нам нужно указать [] и название директивы
// [] нужны, чтобы Angular понимал, что это обычный атрибут в DOM-дереве

// теперь директиву нужно зарегистрировать в модуле app.module, прописать в массиве declarations и импортировать из соотвествующего файла
@Directive ({
    selector: '[appHover]'
})
export class HoverDirective {
   // любые свойства в Angular оптимизируются декораторами, поэтому мы можем привязать определенное свойство к переменной
   //  в качестве параметра в данный декоратор мы передаем то поле, на которое нам нужно сделать привязку
   // т.к. мы будем привязывать определенный класс, то вначале обращаемся к классу и через точку указываем название данного класса
   // теперь, чтобы осуществить полную привязку, нужно указать какую-то булевскую переменную, кот. по умолчанию будет являться false 
   // когда данная переменная isHovered будет в true, у нас будет добавляться данный класс hovered
   @HostBinding('class.hovered') isHovered = false;

   // теперь нужно повесить обработчик события на наведение мыши над элементом
   // воспользуемся декоратором @HostListener и в качестве параметра передаем ему событие, кот. должно произойти
   // и описать некоторый callback, напр. onMouseEnter
   // и все, что мы сделаем в данном методе, когда мышка будет наведена на элемент, мы обратимся к переменной this.isHovered и переведем ее значение в true
   // и когда мышка будет уходить, в данную переменную переводить в значение false, т.е. будет убирать данный класс
   @HostListener('mouseenter') onMouseEnter() {
    this.isHovered = true;
   }
   @HostListener('mouseleave') onMouseLeave() {
    this.isHovered = false;
   }
   // теперь можно воспользоваться названием данной директивы appHover, в шаблоне user.component.html в элементе карточки повесим переменную appHover
}