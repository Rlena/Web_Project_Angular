/* создадим новую директиву, кот. будет изменять состояние карточки и как-то ее выделять.
Этот файл будет создавать директиву, кот. сможем использовать в проекте. (1 шаг - создание директивы) */

import { Directive, HostBinding, HostListener } from '@angular/core'

@Directive ({  /* в качестве параметра декоратору мы передаем объект, и здесь обязательное поле - selector.
               Т.к. директивы обычно вешаются как атрибуты, то здесь как css-селектор нам нужно указать [] и название директивы, напр. appHover
               [] нужны, чтобы Angular понимал, что это обычный атрибут в DOM-дереве. (3 шаг - создание директивы)
               Теперь директиву нужно зарегистрировать в модуле app.module.ts,
               прописать в массиве declarations название директивы и импортировать из соотвествующего файла. (4.0 шаг - создание директивы) */

    selector: '[appHover]'
})
export class HoverDirective { /* Создание директивы начинается с создания класса в typeScript и экспортировании его наружу.
                              После чего нужно указать Angular, что данный класс является директивой, поэтому ставим спец. декоратор @Directive.
                              И далее импортируем его из библиотеки angular/core. (2 шаг - создание директивы) */

   @HostBinding('class.hovered') isHovered = false;  /* любые свойства в Angular оптимизируются декораторами,
                                                     поэтому мы можем привязать определенное свойство к переменной.
                                                     Это делается с помощью декоратора @HostBinding (он также должен быть импортирован
                                                     из библиотеки '@angular/core').
                                                     В качестве параметра в данный декоратор мы передаем то поле,
                                                     на которое нам нужно сделать привязку в строковом формате.
                                                     Т.к. мы будем привязывать определенный класс, то вначале обращаемся к классу
                                                     и через точку указываем название данного класса class.hovered.
                                                     Теперь, чтобы осуществить полную привязку, нужно указать какую-то булевскую переменную,
                                                     напр. isHovered и допустим, по умолчанию она будет являться false.
                                                     Суть в том, что когда данная переменная isHovered будет в true,
                                                     у нас будет добавляться данный класс hovered, иначе класс добавляться не будет.
                                                     (5 шаг - создание директивы) */

   @HostListener('mouseenter') onMouseEnter() { /* Теперь нужно повесить обработчик события на наведение мыши над элементом.
                                                Здесь мы воспользуемся декоратором @HostListener (он импортируется из библиотеки '@angular/core')
                                                и в качестве параметра передаем ему событие, кот. должно произойти, в нашем случае это mouseenter.
                                                Далее нужно описать некоторый callback, напр. onMouseEnter 
                                                И все, что мы сделаем в данном методе, когда мышка будет наведена на элемент,
                                                мы обратимся к переменной this.isHovered и переведем ее значение в true.
                                                (6.0 шаг - создание директивы) */
    this.isHovered = true;
   }
   @HostListener('mouseleave') onMouseLeave() { /* Когда мышка будет уходить (добавим новую прослушку события mouseleave),
                                                  в данную переменную будем заносить значение false, т.е. будет убирать данный класс.
                                                  (6.1 шаг - создание директивы)
                                                  После этого, воспользуемся названием данной директивы appHover и в user.component.html
                                                  на <div class="card"> повесим переменную appHover.
                                                  Теперь, при наведении на карточку будут применяться отмеченные стили.
                                                  Т.о. мы вынесли всю логику по добавлению класса в отдельный элемент
                                                  и теперь appHover можем вешать на любые элементы и они будут отрабатывать
                                                  по запланированному функционалу. (7 шаг - создание директивы) */
    this.isHovered = false;
   }
}