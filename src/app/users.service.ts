// здесь мы будем делать запрос на удаленный сервер

import { Http } from '@angular/http';  /* подключаем класс Http из библиотеки @angular/http (1.3 шаг - запрос на удаленный сервер) */

import { Injectable } from '@angular/core';   /* Декоратор @Injectsble импортируем из библиотеки @angular/core.
                                              (4.3 шаг - запрос на удаленный сервер)
                                              Теперь нужно зарегистрировать Http в модуле app.module.ts.
                                              (если мы работаем в какими-то дополнительными библиотеками, напр. @angular/http, 
                                              нужно сообщить нашему приложению, что мы используем их в нашем коде,
                                              поэтому в app.module.ts во вкладке imports: нужно прописать еще 1 модуль HttpModule
                                              и импортировать его из библиотеки @angular/http). (5.0 шаг - запрос на удаленный сервер) */

import 'rxjs/add/operator/map';  /* подключение оператора map (7.2 шаг - запрос на удаленный сервер) */


@Injectable()  /* мы не можем инжектировать какие-либо классы, у которых не определены декораторы;
               существует спец. декоратор, который позволяеть делать сервисы более функциональными и включающими другие сервисы.
               Вешаем спец. декоратор на UsersService. (4.1 шаг - запрос на удаленный сервер) 
               Теперь его нужно импортировать из библиотеки @angular/core. (4.2 шаг - запрос на удаленный сервер) */

export class UsersService {  /* экспортируем класс UsersService (1 шаг - создание сервиса).
                             После чего нам нужно подключить данный сервис в нашем компоненте app.component.ts (2.0 шаг - создание сервиса) */

  size = 8; /* // создаем переменную size, кот. по умолчанию равна 8. (7 шаг - функционал страницы setup)
                  И забьем эту переменную в url с пом. обычной конкатенации (+this.size+). (8 шаг - функционал страницы setup)
                  Теперь нужно создать метод, который позволит нам изменять данную переменную size, назовем его напр. setSize.
                  (9.0 шаг - функционал страницы setup) */                

  constructor(private http: Http) {}  /* инжектируем спец. класс, который будет отвечать за работу с Ajax (делаем inject класса Http),
                                      создаем приватную переменную, напр. http, и она является классом Http. (1.1 шаг - запрос на удаленный сервер)
                                      Этот класс Http нужно подключить из библиотеки '@angular/http' (1.2 шаг - запрос на удаленный сервер) */
  
  // в оператор map попадает некоторый response, у response есть спец. метод json

  getUsers() {  /* у нас есть приватная переменная http и нам необходимо сделать запрос.
                Создадим метод, кот. будет называться getUsers и здесь мы должны сделать запрос по url - url.txt:
                обращаемся к приватной переменной http, у которой есть различные методы. Нас интересует метод get;
                мы обращаемся к методу get и первым параметром указываем url. Теперь у сервиса есть метод getUsers.
                Если мы что-то из этого метода берем, нужно что-то вернуть, поэтому пишем вначале return. (2 шаг - запрос на удаленный сервер)
                Теперь в app.component.ts нужно обратиться к сервису. (3.0 шаг - запрос на удаленный сервер) */

    return this.http.get('https://randomuser.me/api/?inc=gender,name,picture,location&results='+this.size+'&nat=gb') /* делаем запрос get,
                                                                                                         он нам возвращает RXjs стрим.
                                                                                                         Теперь мы распарсим (обработаем)
                                                                                                         данный ответ с помощью оператора map и
                                                                                                         подключаем map из 'rxjs/add/operator/map'
                                                                                                         (8.1 шаг - запрос на удаленный сервер) */

    .map(function(response) {  /* Распарсим ответ сервера с пом. оператора map.
                               Передаем в оператор map функцию, которая принимает принимает в себя объект response
                               и мы должны что-то вернуть из этой функции. (8.2 шаг - запрос на удаленный сервер) */  
      return response.json();
    })
    .map(response => response.results) /* Теперь объект нужно привести к нужному нам формату.
                                       Здесь мы также получаем response и нас интересует массив results, поэтому мы вернем массив results.
                                       Теперь в объект попадает массив тех пользователей, который нам нужен.
                                       (8.3 шаг - запрос на удаленный сервер)
                                       Объекты передаются в неудобном формате, поэтому весь массив мы приведем к нужному нам формату.
                                       Для этого воспользуемся еще одним оператором map. (8.4 шаг - запрос на удаленный сервер) */

    .map(users => {  /* Сюда уже попадает массив users и здесь мы уже будем форматировать данный массив. (8.5 шаг - запрос на удаленный сервер) */

      return users.map(u => {   /* Делаем return, обратимся к массиву users и у него уже вызовем метод map.
                                В метод map() нужно передать некоторый колбэк, который будет обрабатывать каждый из элементов данного массива,
                                в нашем случае это будет объект u. (8.6 шаг - запрос на удаленный сервер) */

        return {  /* тут будем возвращать новый объект.
                  У каждого объекта будет поле name, кот. будет состоять из u.name.first + пробел + u.name.last.
                  Также будут поля image и geo. (8.7 шаг - запрос на удаленный сервер) */
          name: u.name.first + ' ' + u.name.last,
          image: u.picture.large,
          geo: u.location.city + ' ' + u.location.state + ' ' + u.location.street
          /* Теперь в app.component.ts нам нужно переопределить пустой массив users = []. (9.0 шаг - запрос на удаленный сервер) */
        }
      })
    })
  }

 setSize(size) {  /* создаем метод setSize.
                  Он будет принимать на себя size. Что он будет делать: он будет приватной перемeнной size присваивать значение size,
                  которое приходит нам в функцию. (9.1 шаг - функционал страницы setup)
                  Теперь данный UsersService нам нужно подключить в страницу setup-page-component.ts. (10 шаг - функционал страницы setup) */
  this.size = size;
}


  /* создаем статический массив users, который состоит из объектов.
  Он состоит их тестовых данных, которые мы впоследствие заменим реальными данными с сервера.
  У каждого элемента есть свое уникальное имя. Нам нужно обратиться к данному массиву и проитерировать его.
  (В данном случае итерировать будем тег <app-user>).
  Переходим в app.component.html (1 шаг - вывод списка элементов) */    
  users = [  
    // на каждой итерации переменная u будет являться данным объектом {name: 'WFM 1'} 
    {name: 'WFM 1'},
    {name: 'WFM 2'},
    {name: 'WFM 3'},
    {name: 'WFM 4'},
    {name: 'WFM 5'},
    {name: 'WFM 6'}
  ]
}