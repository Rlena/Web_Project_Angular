// Http класс подключаем из библиотеки @angular/http
import { Http } from '@angular/http';

// Injectsble декоратор импортируем из библиотеки @angular/core
// после чего в app.module.ts нужно прописать новый серис http
// если мы работаем в какими-то дополнительными библиотеками, напр. @angular/http, нужно сообщить нашему приложению, что мы используем их в нашем коде, поэтому в app.module во вкладке imports: нужно прописать еще 1 модуль HttpModule
import { Injectable } from '@angular/core';

// подключение оператора map
import 'rxjs/add/operator/map';

// существует спец. декоратор, который позвлляеть делать сервисы более функциональными и включающими другие сервисы
@Injectable()

// экспортируем класс UsersService (1 шаг создание сервиса)
export class UsersService {

  // создаем переменную, кот. по умолчанию равна 8 и забьем эту переменную в url
  size = 8;

  // здесь мы будем делать запрос на удаленный сервер
  // инжектируем спец. класс, который будет отвечать за работу с Ajax
  // создаем приватную переменную, напр. http, и она является классом Http
  constructor(private http: Http) {}

  //  у нас есть приватная переменная Http и нам необходимо сделать запрос
  // создадим метод, кот. будет называться getUsers и здесь мы должны сделать запрос по url - url.txt

  // обращаемся к приватной переменной http, у которой есть различные методы, нас интересует метод get
  // мы обращаемся к методу get и первым параметром указываем url, теперь у сервиса есть метод getUsers
  // если мы что-то из этого метода берем, нужно что-то вернуть, поэтому пишем внчале return
  // теперь в app.component.ts нужно обратиться к сервису
  
  // делаем запрос get, он нам возвращает RXjs стрим и теперь мы распарсим (обработаем) данный ответ с помощью оператора map
  // в оператор map попадает некоторый response, у response есть спец. метод json
  getUsers() {
    return this.http.get('https://randomuser.me/api/?inc=gender,name,picture,location&results='+this.size+'&nat=gb')
    // это - .map(response => response.json()) тоже самое, что
    // передаем функцию, которая принимает принимает в себя объект response и мы долдны что-то вернуть из этой функции
    .map(function(response) {
      return response.json();
    })
    // теперь объект нужно привести к нужному нам формату
    // в объект попадает массив тех пользователей, который нам нужен
    .map(response => response.results)

    // теперь массив нужно привести к удобному нам формату
    // в метод map() нужно передать некоторый колбэк, который будет обрабатывать каждый из элементов данного массива, в нашем случае это будет объект u
    .map(users => {
      return users.map(u => {
        // тут будем возвращать новый объект
        return {
          name: u.name.first + ' ' + u.name.last,
          image: u.picture.large,
          geo: u.location.city + ' ' + u.location.state + ' ' + u.location.street

        }
      })
    })
  }

 /* также мы сделаем метод, который позволит нам изменять данную переменную size, напр. назовем его setSize
 Он будет принимать на себя size и он будет приватной перемннной size присваивать значение size, которое приходит нам в функцию.
 После этого данный UsersService нам нужно подключить в страницу setup-page-component.ts */
  setSize(size) {
    this.size = size;
  }

   //создаем массив, который состоит из объектов
  users = [
    // на каждой итерации переменная u будет являться данным объектом {name: 'WFM 1'} 
    {name: 'WFM 1'},
    {name: 'WFM 2'},
    {name: 'WFM 3'},
    {name: 'WFM 4'},
    {name: 'WFM 5'},
    {name: 'WFM 6'}
  ]
}